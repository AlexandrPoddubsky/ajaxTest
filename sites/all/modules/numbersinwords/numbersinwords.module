<?php

    function numbersinwords_menu()
    {
        $items = array();
        $item['numbers_to_words'] = array(
            'title' => 'Numbers in Words',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('numbers_form'),
            'access callback' => TRUE,
            'type' => MENU_NORMAL_ITEM,
        );

        $item['words'] = array(
            'title' => 'Words in Numbers',
            'page callback' => 'words_numbers',
            'access callback' => TRUE,
            'type' => MENU_CALLBACK,
        );
        return $items;
    }

    function numbers_form()
    {
        $form['input'] = array(
            '#title' => 'Enter a number you would like to converted to words',
            '#type' => 'textfield',
            '#description' => 'Please enter your number.',
            '#required' => TRUE,
        );

        $form['submit'] = array(
            '#type' => 'submit',
            '#value' => 'Numbers to Words',
        );
        return $form;
    }

    function numbers_in_words($number)
    {
        $hyphen = '-';
        $conjunction = ' and ';
        $seperator = ', ';
        $negative = 'negative ';
        $decimal = ' point ';
        $dictionary = array(
            0                   => 'zero',
            1                   => 'one',
            2                   => 'two',
            3                   => 'three',
            4                   => 'four',
            5                   => 'five',
            6                   => 'six',
            7                   => 'seven',
            8                   => 'eight',
            9                   => 'nine',
            10                  => 'ten',
            11                  => 'eleven',
            12                  => 'twelve',
            13                  => 'thirteen',
            14                  => 'fourteen',
            15                  => 'fifteen',
            16                  => 'sixteen',
            17                  => 'seventeen',
            18                  => 'eighteen',
            19                  => 'nineteen',
            20                  => 'twenty',
            30                  => 'thirty',
            40                  => 'fourty',
            50                  => 'fifty',
            60                  => 'sixty',
            70                  => 'seventy',
            80                  => 'eighty',
            90                  => 'ninety',
            100                 => 'hundred',
            1000                => 'thousand',
            1000000             => 'million',
            1000000000          => 'billion',
            1000000000000       => 'trillion',
        );

        if (!is_numeric($number)){
            return false;
        }

        if (($number >= 0 && (int) $number < 0) || (int) $number < 0 - PHP_INT_MAX) {
            trigger_error(
                'We only accept numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX,
                E_USER_WARNING
            );
            return false;
        }

        if ($number < 0) {
            return $negative . numbers_in_words(abs($number));
        }

        $string = $fraction = null;

        if (strpos($number, '.') !== false) {
            list($number, $fraction) = explode('.', $number);
        }

        switch(true) {
            case $number < 21:
                $string = $dictionary[$number];
                break;
            case $number < 100:
                $tens = ((int) ($number / 10)) * 10;
                $units = $number % 10;
                $string = $dictionary[$tens];
                if ($units){
                    $string .= $hyphen . $dictionary[$units];
                }
                break;
            case $number < 1000:
                $hundreds = $number / 100;
                $remainder = $number % 100;
                $string = $dictionary[$hundreds] . ' ' . $dictionary[100];
                if ($remainder) {
                    $string .= $conjunction . numbers_in_words($remainder);
                }
                break;
            default:
                $baseUnit = pow(1000, floor(log($number, 1000)));
                $numBaseUnits = (int) ($number / $baseUnit);
                $remainder = $number % $baseUnit;
                $string = numbers_in_words($numBaseUnits) . ' ' . $dictionary[$baseUnit];
                if ($remainder){
                    $string .= $remainder < 100 ? $conjunction : $seperator;
                    $string .= numbers_in_words($remainder);
                }
                break;
        }

        if (null !== $fraction && is_numeric($fraction)) {
            $string .= $decimal;
            $words = array();
            foreach (str_split((string) $fraction) as $number){
                $words[] = $dictionary[$number];
            }
            $string .= implode(' ', $words);
        }

        return $string;
    }

    function numbers_form_submit($form, &$form_state)
    {

        $input = $form_state['values']['input'];
        $result = numbers_in_words($input);
        $_SESSION['number'] = $result;

        $form_state['redirect'] = 'words';

    }

    function words_success()
    {
        $words = $_SESSION['number'];
        return '<p>Your words are: ' . $words . '</p>';
    }
